sd(datW$TAVE[datW$siteN == 1],na.rm=TRUE))
#pnrom of 20 gives me all probability (area of the curve) below 20
#subtracting from one leaves me with the area above 20
qnorm(0.95,
mean(datW$TAVE[datW$siteN == 1],na.rm=TRUE),
sd(datW$TAVE[datW$siteN == 1],na.rm=TRUE))
######question 6
#adding 4 degrees to mean temperature
pnorm(qnorm(0.95,
mean(datW$TAVE[datW$siteN == 1],na.rm=TRUE),
sd(datW$TAVE[datW$siteN == 1],na.rm=TRUE)),
mean(datW$TAVE[datW$siteN == 1]+4,na.rm=TRUE),
sd(datW$TAVE[datW$siteN == 1],na.rm=TRUE))
#######question 7
#histogram with precipitation
h1 <- hist(datW$PRCP[datW$siteN == 1],
freq=FALSE,
main = paste(levels(datW$NAME)[1]),
xlab = "Average daily precipitation",
xlim=c(0,80),
ylab="Relative frequency",
col="grey50",
border="white")
###########question 8
#want to aggregate data
#added column of just year into the data so we can aggregate by year, not just date
year<- substring(datW$DATE,1,4)
datYEAR<-cbind(datW,year)
agg_data<- aggregate(datYEAR$PRCP, by= list(datYEAR$year,datW$siteN), FUN='mean',na.rm=TRUE)
#agg_data has three columns
#group.1 is year, group.2 is site number, and x is average rainfall in the year
colnames(agg_data)<-c("year","site","avg_rainfall")
agg_data
sum(agg_data$x[agg_data$Group.2])
sum_ogram <- hist(agg_data$avg_rainfall[agg_data$site==1],
freq=FALSE,
main = "Aberdeen, WA US",
xlab = "Average daily precipitation",
xlim=c(0,10),
ylab="Relative frequency",
col="light blue",
border="white")
#xlim was done just by what I saw, how would I do this so it automatically fit the data?
######question 9
#need to get mean temperatures and precipitains from before
sum_ogram <- hist(agg_data$avg_rainfall[agg_data$site==1],
freq=FALSE,
main = "ABERDEEN, WA US",
xlab = "Average daily precipitation",
xlim=c(0,10),
ylab="Relative frequency",
col="light blue",
border="white")
###########question 8
#want to aggregate data
#added column of just year into the data so we can aggregate by year, not just date
year<- substring(datW$DATE,1,4)
datYEAR<-cbind(datW,year)
agg_data<- aggregate(datYEAR$PRCP, by= list(datYEAR$year,datW$siteN), FUN='mean',na.rm=TRUE)
#agg_data has three columns
#group.1 is year, group.2 is site number, and x is average rainfall in the year
colnames(agg_data)<-c("year","site","avg_rainfall")
agg_data
sum(agg_data$x[agg_data$site])
sum(agg_data$avg_rainfall[agg_data$site])
sum_ogram <- hist(agg_data$avg_rainfall[agg_data$site==1],
freq=FALSE,
main = "ABERDEEN, WA US",
xlab = "Average daily precipitation",
xlim=c(0,10),
ylab="Relative frequency",
col="light blue",
border="white")
sum_ogram <- hist(agg_data$avg_rainfall[list(agg_data$year,agg_data$site==1)],
freq=FALSE,
main = "ABERDEEN, WA US",
xlab = "Average daily precipitation",
xlim=c(0,10),
ylab="Relative frequency",
col="light blue",
border="white")
sum_ogram <- hist(agg_data$avg_rainfall[agg_data$year,agg_data$site==1],
freq=FALSE,
main = "ABERDEEN, WA US",
xlab = "Average daily precipitation",
xlim=c(0,10),
ylab="Relative frequency",
col="light blue",
border="white")
sum_ogram <- hist(agg_data$avg_rainfall[agg_data$year],
freq=FALSE,
main = "ABERDEEN, WA US",
xlab = "Average daily precipitation",
xlim=c(0,10),
ylab="Relative frequency",
col="light blue",
border="white")
sum_ogram <- hist(agg_data$avg_rainfall[agg_data$site==1],
freq=FALSE,
main = "ABERDEEN, WA US",
xlab = "Average daily precipitation",
xlim=c(0,10),
ylab="Relative frequency",
col="light blue",
border="white")
sum_ogram <- hist(agg_data$avg_rainfall[agg_data$year],
freq=TRUE,
main = "ABERDEEN, WA US",
xlab = "Average annual precipitation (mm)",
xlim=c(0,10),
ylab="Relative frequency",
col="light blue",
border="white")
sum_ogram <- hist(agg_data$avg_rainfall[agg_data$site==1],
freq=TRUE,
main = "ABERDEEN, WA US",
xlab = "Average annual precipitation (mm)",
xlim=c(0,10),
ylab="Relative frequency",
col="light blue",
border="white")
sum_ogram <- hist(agg_data$avg_rainfall[agg_data$site==1],
freq=FALSE,
main = "ABERDEEN, WA US",
xlab = "Average annual precipitation (mm)",
xlim=c(0,10),
ylab="Relative frequency",
col="light blue",
border="white")
datYEAR
agg_data
sum_ogram <- hist(agg_data$site==1),
freq=FALSE,
main = "ABERDEEN, WA US",
xlab = "Average annual precipitation (mm)",
xlim=c(0,10),
ylab="Relative frequency",
col="light blue",
border="white")
sum_ogram <- hist(agg_data$avg_rainfall[agg_data$site==1],
freq=FALSE,
main = "ABERDEEN, WA US",
xlab = "Average annual precipitation (mm)",
xlim=c(0,10),
ylab="Relative frequency",
col="light blue",
border="white")
sum_ogram <- hist(agg_data$site==1,
freq=FALSE,
main = "ABERDEEN, WA US",
xlab = "Average annual precipitation (mm)",
xlim=c(0,10),
ylab="Relative frequency",
col="light blue",
border="white")
sum_ogram <- hist(agg_data$avg_rainfall[agg_data$site==1],
freq=FALSE,
main = "ABERDEEN, WA US",
xlab = "Average annual precipitation (mm)",
xlim=c(0,10),
ylab="Relative frequency",
col="light blue",
border="white")
sum(agg_data$avg_rainfall[agg_data$site])
sum(agg_data$avg_rainfall[agg_data$site==1])
aggregate(sum(agg_data$avg_rainfall[agg_data$site]))
aggregate(sum(agg_data$avg_rainfall[agg_data$site]),fun=mean)
aggregate(sum(agg_data$avg_rainfall[agg_data$site]),FUN="mean")
aggregate(sum(agg_data$avg_rainfall),by=list(agg_data$site),FUN="mean")
aggregate(sum(agg_data$avg_rainfall[agg_data$site]),by=list(agg_data$site),FUN="mean")
avgrain<-aggregate(agg_data$avg_rainfall,by=list(agg_data$site),FUN="mean")
avgrain
colnames(agg_data)<-c("year","site","avg_rainfall")
avg_rain<-aggregate(agg_data$avg_rainfall,by=list(agg_data$site),FUN="mean")
avg_rain
colnames(avg_rain)<-c("site","avg_rainfall")
avg_rain<-aggregate(agg_data$avg_rainfall,by=list(agg_data$site),FUN="mean")
colnames(avg_rain)<-c("site","avg_rainfall")
avg_rain
#mean of annual precipitation for all sites individually
avg_rain_site<-aggregate(agg_data$avg_rainfall,by=list(agg_data$site),FUN="mean")
colnames(avg_rain_site)<-c("site","avg_rainfall")
avg_rain_site
avg_rain_year<-aggregate(agg_data$avg_rainfall,by=list(agg_data$year),FUN="mean")
colnames(avg_rain_year)<-c("site","avg_rainfall")
avg_rain_year
#Activity 2
#make a vector of tree heights in meters
heights <- c(30,41,20,22)
#convert to cm (m to cm)
heights_cm <- heights*100
heights_cm
#first tree height
heights[1]
#second and third tree height
heights[2:3]
#matrices
#get more info on the matrix function
help(matrix)
#arguments are specified in functions and help us get the result we want
#set up a matrix with 2 columns and fill in by rows
#first argument is the vector of numbers to fill in the matrix
#byrow=false would go by column
Mat<-matrix(c(1,2,3,4,5,6), ncol=2, byrow=TRUE)
Mat
#set up a matrix that fills in by columns
#first argument is the vector of numbers to fill in the matrix
Mat.bycol<-matrix(c(1,2,3,4,5,6), ncol=2, byrow=FALSE)
Mat.bycol
#when both matrices are run, the output now has square bracket labels with two spots
#always notation is [row,column]
#subset the matrix to look at row 1, column2
Mat.bycol[1,2]
#look at all values in row 1
Mat.bycol[1,]
#look at all values in column 2
Mat.bycol[,2]
#read in weather station file from the data folder
datW <- read.csv("y:\\Students\\jvjohns\\a02\\2011124.csv")
#get more information about the dataframe
str(datW)
#########question 1
#two types of data: numeric and factors (assigned to repeating character strings)
#specify a column with a proper date format
#note the format here dataframe$column
#lower-case y is 2 digit year, Y is 4 digit year
#as.numeric makes it a number but in the date fgorm with %Y
datW$dateF <- as.Date(datW$DATE, "%Y-%m-%d")
#google date formatting in r to find more options and learn more
##########question 2
characters<- c("pig","horse","cow","chicken","donkey");
factors<-c(0,1,2,3,4);
factors<-as.factor(factors);
numerical<-c(2,5,8,3,1);
integer<-c(3,6,8,6,4)
integer<-as.integer(integer)
#find out all unique site names
levels(datW$NAME)
#look at the mean maximum temperature for Aberdeen
#subsetting with brackets
#answer comes to NA becasue there are missing arguments
mean(datW$TMAX[datW$NAME == "ABERDEEN, WA US"])
#look at the mean maximum temperature for Aberdeen
#with na.rm argument set to true to ingnore NA so there is a number answer
mean(datW$TMAX[datW$NAME == "ABERDEEN, WA US"], na.rm=TRUE)
#calculate the average daily temperature
#This temperature will be halfway between the minimum and maximum temperature
datW$TAVE <- datW$TMIN + ((datW$TMAX-datW$TMIN)/2)
#more ways to subset with logical operaters in r (just look these up online like != is not equal to and == equal to)
#get the mean across all sites
#the by function is a list of one or more variables to index over.
#FUN indicates the function we want to use
#if you want to specify any function specific arguments use a comma and add them after the function
#here we want to use the na.rm arguments specific to
averageTemp <- aggregate(datW$TAVE, by=list(datW$NAME), FUN="mean",na.rm=TRUE)
averageTemp
#change the automatic output of column names to be more meaningful
#note that MAAT is a common abbreviation for Mean Annual Air Temperature
colnames(averageTemp) <- c("NAME","MAAT")
averageTemp
#convert level to number for factor data type
#you will have to reference the level output or look at the row of data to see the character designation.
datW$siteN <- as.numeric(datW$NAME)
#make a histogram for the first site in our levels
#main= is the title name argument.
#Here you want to paste the actual name of the factor not the numeric index
#since that will be more meaningful.
hist(datW$TAVE[datW$siteN == 1],
freq=FALSE,
main = paste(levels(datW$NAME)[1]),
xlab = "Average daily temperature (degrees C)",
ylab="Relative frequency",
col="grey50",
border="white")
###############question 3
#what are the arguments in the histogram above??
#we are ignoring NAs, going by list of the names, function is the mean and the na.rm is true
#freq=false is that the histogram goes by probability densities
#xlab and ylab are the axis labels
#main is histogram label and border of boxes are white and color is grey
#make a histogram for the first site in our levels, Aberdeen
#main= is the title name argument.
#Here you want to paste the actual name of the factor not the numeric index
#since that will be more meaningful.
hist(datW$TAVE[datW$siteN == 1],
freq=FALSE,
main = paste(levels(datW$NAME)[1]),
xlab = "Average daily temperature (degrees C)",
ylab="Relative frequency",
col="grey50",
border="white")
#add mean line with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 1],na.rm=TRUE),
col = "tomato3",
lwd = 3)
#add standard deviation line below the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 1],na.rm=TRUE) - sd(datW$TAVE[datW$siteN == 1],na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
#add standard deviation line above the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 1],na.rm=TRUE) + sd(datW$TAVE[datW$siteN == 1],na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
###########question 4
#site 2
hist(datW$TAVE[datW$siteN == 2],
freq=FALSE,
main = paste(levels(datW$NAME)[2]),
xlab = "Average daily temperature (degrees C)",
ylab="Relative frequency",
col="blue",
border="white")
#add mean line with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 2],na.rm=TRUE),
col = "tomato3",
lwd = 3)
#add standard deviation line below the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 2],na.rm=TRUE) - sd(datW$TAVE[datW$siteN == 2],na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
#add standard deviation line above the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 2],na.rm=TRUE) + sd(datW$TAVE[datW$siteN == 2],na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
#site 3
hist(datW$TAVE[datW$siteN == 3],
freq=FALSE,
main = paste(levels(datW$NAME)[3]),
xlab = "Average daily temperature (degrees C)",
ylab="Relative frequency",
col="light blue",
border="white")
#add mean line with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 3],na.rm=TRUE),
col = "tomato3",
lwd = 3)
#add standard deviation line below the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 3],na.rm=TRUE) - sd(datW$TAVE[datW$siteN == 3],na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
#add standard deviation line above the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 3],na.rm=TRUE) + sd(datW$TAVE[datW$siteN == 3],na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
#site 4
hist(datW$TAVE[datW$siteN == 4],
freq=FALSE,
main = paste(levels(datW$NAME)[4]),
xlab = "Average daily temperature (degrees C)",
ylab="Relative frequency",
col="yellow",
border="white")
#add mean line with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 4],na.rm=TRUE),
col = "tomato3",
lwd = 3)
#add standard deviation line below the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 4],na.rm=TRUE) - sd(datW$TAVE[datW$siteN == 4],na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
#add standard deviation line above the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 4],na.rm=TRUE) + sd(datW$TAVE[datW$siteN == 4],na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
#site 5
hist(datW$TAVE[datW$siteN == 5],
freq=FALSE,
main = paste(levels(datW$NAME)[5]),
xlab = "Average daily temperature (degrees C)",
ylab="Relative frequency",
col="orange",
border="white")
#add mean line with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 5],na.rm=TRUE),
col = "tomato3",
lwd = 3)
#add standard deviation line below the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 5],na.rm=TRUE) - sd(datW$TAVE[datW$siteN == 5],na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
#add standard deviation line above the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 5],na.rm=TRUE) + sd(datW$TAVE[datW$siteN == 5],na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
#make a histogram for the first site in our levels
#main= is the title name argument.
#Here you want to paste the actual name of the factor not the numeric index
#since that will be more meaningful.
#note I've named the histogram so I can reference it later
h1 <- hist(datW$TAVE[datW$siteN == 1],
freq=FALSE,
main = paste(levels(datW$NAME)[1]),
xlab = "Average daily temperature (degrees C)",
ylab="Relative frequency",
col="grey50",
border="white")
#the seq function generates a sequence of numbers that we can use to plot the normal across the range of temperature values
x.plot <- seq(-10,30, length.out = 100)
#the dnorm function will produce the probability density based on a mean and standard deviation.
y.plot <-  dnorm(seq(-10,30, length.out = 100),
mean(datW$TAVE[datW$siteN == 1],na.rm=TRUE),
sd(datW$TAVE[datW$siteN == 1],na.rm=TRUE))
#create a density that is scaled to fit in the plot  since the density has a different range from the data density.
#!!! this is helpful for putting multiple things on the same plot
#!!! It might seem confusing at first. It means the maximum value of the plot is always the same between the two datasets on the plot. Here both plots share zero as a minimum.
y.scaled <- (max(h1$density)/max(y.plot)) * y.plot
#points function adds points or lines to a graph
#the first two arguements are the x coordinates and the y coordinates.
points(x.plot,
y.scaled,
type = "l",
col = "royalblue3",
lwd = 4,
lty = 2)
help(dnorm)
#pnorm(value to evaluate at (note this will evaluate for all values and below),mean, standard deviation)
pnorm(0,
mean(datW$TAVE[datW$siteN == 1],na.rm=TRUE),
sd(datW$TAVE[datW$siteN == 1],na.rm=TRUE))
#pnrom with 5 gives me all probability (area of the curve) below 5
pnorm(5,
mean(datW$TAVE[datW$siteN == 1],na.rm=TRUE),
sd(datW$TAVE[datW$siteN == 1],na.rm=TRUE))
#pnrom with 5 gives me all probability (area of the curve) below 5
pnorm(5,
mean(datW$TAVE[datW$siteN == 1],na.rm=TRUE),
sd(datW$TAVE[datW$siteN == 1],na.rm=TRUE))- pnorm(0,
mean(datW$TAVE[datW$siteN == 1],na.rm=TRUE),
sd(datW$TAVE[datW$siteN == 1],na.rm=TRUE))
#pnrom of 20 gives me all probability (area of the curve) below 20
#subtracting from one leaves me with the area above 20
1 - pnorm(20,
mean(datW$TAVE[datW$siteN == 1],na.rm=TRUE),
sd(datW$TAVE[datW$siteN == 1],na.rm=TRUE))
#pnrom of 20 gives me all probability (area of the curve) below 20
#subtracting from one leaves me with the area above 20
qnorm(0.95,
mean(datW$TAVE[datW$siteN == 1],na.rm=TRUE),
sd(datW$TAVE[datW$siteN == 1],na.rm=TRUE))
######question 6
#adding 4 degrees to mean temperature
pnorm(qnorm(0.95,
mean(datW$TAVE[datW$siteN == 1],na.rm=TRUE),
sd(datW$TAVE[datW$siteN == 1],na.rm=TRUE)),
mean(datW$TAVE[datW$siteN == 1]+4,na.rm=TRUE),
sd(datW$TAVE[datW$siteN == 1],na.rm=TRUE))
#######question 7
#histogram with precipitation
h1 <- hist(datW$PRCP[datW$siteN == 1],
freq=FALSE,
main = paste(levels(datW$NAME)[1]),
xlab = "Average daily precipitation",
xlim=c(0,80),
ylab="Relative frequency",
col="grey50",
border="white")
###########question 8
#want to aggregate data
#added column of just year into the data so we can aggregate by year, not just date
year<- substring(datW$DATE,1,4)
datYEAR<-cbind(datW,year)
agg_data<- aggregate(datYEAR$PRCP, by= list(datYEAR$year,datW$siteN), FUN='mean',na.rm=TRUE)
#agg_data has three columns
#group.1 is year, group.2 is site number, and x is average rainfall in the year
colnames(agg_data)<-c("year","site","avg_rainfall")
agg_data
sum(agg_data$avg_rainfall[agg_data$site])
#this histogram is showing the average annual precipitation of only site 1 and the frequency of the average annual precipitaion
#the data points for site 1 are by year already
sum_ogram <- hist(agg_data$avg_rainfall[agg_data$site==1],
freq=FALSE,
main = "ABERDEEN, WA US",
xlab = "Average annual precipitation (mm)",
xlim=c(0,10),
ylab="Relative frequency",
col="light blue",
border="white")
#xlim was done just by what I saw, how would I do this so it automatically fit the data?
######question 9
#mean of annual precipitation for all sites individually
avg_rain_site<-aggregate(agg_data$avg_rainfall,by=list(agg_data$site),FUN="mean")
colnames(avg_rain_site)<-c("site","avg_rainfall")
avg_rain_site
#mean of annual precipitation for all years individually
avg_rain_year<-aggregate(agg_data$avg_rainfall,by=list(agg_data$year),FUN="mean")
colnames(avg_rain_year)<-c("site","avg_rainfall")
avg_rain_year
